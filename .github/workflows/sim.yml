# This is a basic workflow to help you get started with Actions

name: go-services

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# A workflow run is artifactmade up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      working-directory: ./
      registry: ghcr.io
      image_name: ${{ github.repository }}/sim

    # The type of runner that the job will run on
    runs-on: ["ubuntu-latest"]


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.1' # The Go version to download (if necessary) and use.
      - run: |
          mkdir -p build
          go build --ldflags '-extldflags "-static"' -o build/sim cmd/server/main.go
        working-directory: ${{ env.working-directory }}
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.working-directory }}/build/*

  build-and-push-image:
    env:
      working-directory: ./
      registry: ghcr.io
      image_name: ${{ github.repository }}/sim

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'linux/arm64,linux/arm'

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.registry }}/${{ env.image_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./
          file: ${{ env.working-directory }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: 'linux/amd64,linux/arm64'